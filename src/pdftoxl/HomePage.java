/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pdftoxl;

import com.itextpdf.text.pdf.PdfDocument;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.PdfTextExtractor;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import technology.tabula.ObjectExtractor;
import technology.tabula.Page;
import technology.tabula.RectangularTextContainer;
import technology.tabula.Table;
import technology.tabula.extractors.BasicExtractionAlgorithm;
import technology.tabula.extractors.SpreadsheetExtractionAlgorithm;

/**
 *
 * @author prashanth_mani
 */
public class HomePage extends javax.swing.JFrame {

 	private static String PDF_PATH;
        private static final String XL_FILE_NAME ="/Users/prashanth_mani/eclipse-workspace/XLfile/Template.xlsx";

	private static String[] columns = {"Well ID", "Operator_Name", "Operator_Number","Well_Name", "Well_Number",
                                            "Well_Type","Status","Datum_Elevation","Ground_Elevation",
                                            "Plugback_Depth","Spud_Date","Completion_Date",
                                            "FirstProDate","Total_Depth","Drill_Type","Drill_Started","Drill_Finished","PDFName"};        
        private static String[] CasingColumns = {"Well ID", "Type","Casing Size", "Nominal Weight","Grade","Feet","PSI","SAX","Top of Cement","PDFName"};
        private static String[] CompletionColumns = {"Well ID", "Completion Type","PDFName"};
        private static String[] FormationColumns = {"Well ID", "Formation","Top MD","PDFName"};
        private static String[] InitialPotentialColumns = {"Well ID", "Test Date","Oil Volume","Oil Rate","Gas Volume","Gas Rate","Water Volume","Flow_Type","Flow Pressure","Choke","Remark","PDFName"};
        private static String[] productionZoneColumns = {"Well ID", "OTC Production Unit No"};
        private static String[] PerforationColumns = {"Well ID", "Top Depth","Base Depth","Spacing Order","Remarks","Acid Volumes","PDFName"};

        private static ArrayList<WellDetails> WellArray =  new ArrayList<>(); 
        private static ArrayList<CasingDetails> CasingDetailsArray =  new ArrayList<>();
        private static ArrayList<Formation> FormationsArray =  new ArrayList<>();
        private static ArrayList<InitialPotential> InitialPotentialArray =  new ArrayList<>();
        private static ArrayList<CompletionType> CompletionTypesArrayList =  new ArrayList<>();
        private static ArrayList<ProductionZoneDetails> productionZone = new ArrayList<>();
        private static ArrayList<Perforation> PerforationArray = new ArrayList<>();
       String Remark = "";

      
        PdfTableExtract ExtractTables = new PdfTableExtract();	
    /**
     * Creates new form HomePage
     */
    public HomePage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Select PDF Folder");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Start Convert");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(14, 14, 14))
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(138, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        showFileBrowser();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
             try {
                 // TODO add your handling code here:
                 PDFFolder();
             } catch (IOException ex) {
                 Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
             }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private void showFileBrowser() {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
             fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int result = fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
             System.out.println("Selected file: " + selectedFile.getAbsolutePath());
             PDF_PATH = selectedFile.getAbsolutePath();
              jLabel1.setText("PDF Location :"+PDF_PATH);
                //JOptionPane.showMessageDialog(rootPane, result);
                jButton2.setEnabled(true);
            }
    }
    
    
    	public  void PDFFolder() throws IOException
	{
		//String PDFPAth ="/Users/prashanth_mani/eclipse-workspace/PDF/SampleData";
		 File  location= new File(PDF_PATH);
                 String type = ".pdf"; // replace what ever type of file you need to search

         if (location.isDirectory() && location != null) 
         {
             int PDFCount = 0;
            for (File f : location.listFiles()) 
            {
               if (f.isFile() && f.getName().endsWith(".pdf")) 
               {
            
                System.out.println("==================================PDF Name "+f.getName()+"==============================");
                  PDTtoTextContent(PDF_PATH+"/"+f.getName(),f.getName());
                  
                    PDFCount++;
                }
           }
            System.out.println("PDF Count = "+PDFCount);
          WellHeaderSheet();
            }
	

       }
        
        
    private  void PDTtoTextContent( String aPDFfile,String PdfName) 
    {

        PdfReader reader;
	 
          String well_id = "";
	  String operator_name = "";
	  String operator_number = "";
	  String well_name = "";
	  String well_number = "";
	  String well_type = "";
	  String status = "";
	  String datum_elevation = "";
	  String ground_elevation = "";
	  String plugback_depth = "";
	  String total_depth = "";
	  String spud_date = "";
	  String completion_date = "";
	  String firstprodate = "";
	  String drill_type = "";
	  String drill_started = "";
	  String drill_finished = "";		 	 
	  int Casing_and_Cement_Line = 0;
          int Liner_line = 0;
	  String OTCProductionUnitNo = "";
	  Remark =""; 
		 //WellArray =  new ArrayList<>();
		 
	        try {

	            reader = new PdfReader(aPDFfile);
                 int NumberOfPages =   reader.getNumberOfPages();
	            PdfDocument pdfDoc = new PdfDocument();
                    String OverAllpage ;
                     String textFromPage2="";
	            // pageNumber = 1
	            String textFromPageone = PdfTextExtractor.getTextFromPage(reader, 1);
	              if(NumberOfPages >1)
                    {
                    textFromPage2 = PdfTextExtractor.getTextFromPage(reader, 2);
//                    System.out.println(textFromPage2);
                    }
	          
                    OverAllpage = textFromPageone + textFromPage2;
	            String lines[] = OverAllpage.split("\\r?\\n");      

	            int i = 0 ;
	            for (String s:lines) {
	            	
	           if( s.startsWith("API No.:") ) 
	           {
	        	   String APINo = s;
	        	   System.out.println("***************** API No *********");
	        	   String[] splited = s.split(" ");	        	   
	        	   well_id = splited[2].trim();
	        	   String[] Spud_Date =APINo.split("Spud Date:");
	        	   spud_date = Spud_Date[1].trim();	
                                                  
	           }
	           if( s.startsWith("OTC Prod.") ) 
	           {
                       String LAST = "";
                       int count =0;
	        	   try {
	        	   System.out.println("***************** Finished Date*********");
	        	   String[] splited = s.split("Finished Date:");
                           if(count ==0)
                           {
                           for(String s1 : splited)
                           {
                               if(s1.startsWith("OTC Prod."))
                               {
                                LAST = s1.replaceAll("OTC Prod. Unit No.:", " ");  
                               }
                               String[] split = LAST.split("Drilling");    
                              OTCProductionUnitNo = split[0].trim();
                              count++;
                           }
                           }
	        	   completion_date = splited[1].trim();
	        	   }catch(ArrayIndexOutOfBoundsException ex)
	        	   {
	        		   
	        	   }
	        	   
	           }
	           if( s.startsWith("1st Prod Date:") ) 
	           {
	        	   System.out.println("***************** 1st Prod Date:  *********");
	        	 
	        	   String FirstProdDate = s.replaceAll("1st Prod Date:", "");
	        	  firstprodate = FirstProdDate.trim();
	        	   
	           }
	           if( s.startsWith("Completion Date: ") ) 
	           {
	        	   System.out.println("***************** Completion Date:  *********");
	        	 
	        	   String CompletionDate = s.replaceAll("Completion Date: ", ""); 
	        	   drill_finished =  CompletionDate.trim();
	        	   
	           }
	           if( s.startsWith("Drill Type:") ) 
	           {
	        	   System.out.println("***************** Drill Type: *********");
	        	 
	        	   String DrillType = s.replaceAll("Drill Type:", "");
	        	  drill_type = DrillType.trim();
	        	   
	           }
	           
	           if( s.startsWith("Well Name:") ) 
	           {
	        	   System.out.println("***************** Well Name *********");
	        	   String WellData = s;
	        	  String WellNameOnly =   WellData.replaceAll("Well Name:", " ");
	        	   String[] splited = WellNameOnly.split("Purchaser/Measurer:");
	        
	        	   well_name = splited[0].trim();
	        	   well_number = splited[0].trim();
	        	   
	           }
	           if( s.startsWith("Location:") ) 
	           {
                       try{
	        	   System.out.println("***************** Well Name *********");
	        	   String FirstSalesDate = s;
                           if(FirstSalesDate.contains("First Sales Date:")){
	        	   String[] splited = FirstSalesDate.split("First Sales Date:");
                           drill_started = splited[1].trim();
                           }
	        	   
                       }catch(ArrayIndexOutOfBoundsException ex)
	        	   {
	        		 System.out.println("Error in First Sales Date");  
                                 ex.printStackTrace();
	        	   }
	        	   
	           }
	           
	           
	           if( s.startsWith("Derrick")) 
	           {
	        	   System.out.println("***************** Derrick *********");
	        	   String DerrickData = s;
	        	 String WellNameOnly =   DerrickData.replaceAll("Derrick Elevation:", " ");
	        	   String[] splited = WellNameOnly.split("Ground Elevation:");
	        
	        	   datum_elevation = splited[0].trim();
	        	   ground_elevation = splited[1].trim();
	           }
	           
	           
	           if( s.startsWith("Operator:") ) 
	           {
	        	   System.out.println("***************** Operatore *********");
	        	   s.replaceAll("Operator:", " ");
	        	   String[] part = s.split("(?<=\\D)(?=\\d)");
	        	
	        	   String[] OperatorName =  part[0].split("Operator:");
	        	   System.out.println(OperatorName[1].trim());
	        	   operator_name = OperatorName[1].trim();
	        	   operator_number = part[1].trim();
	           }
	           
	           
	           if( s.startsWith("Total Depth:") ) 
	           {
	        	   System.out.println("***************** Total Depth: *********");
	        	   String DerrickData = s;
	        	 String WellNameOnly =   DerrickData.replaceAll("Total Depth:", " ");	        
	        	   total_depth = WellNameOnly.trim();
	        	   
	           }
	           if( s.startsWith("Depth Brand") ) 
	           {
	        	 
	        	   System.out.println("***************** Depth Brand *********"+i);
	        	   String GetDepth = lines[i+1];
	        	   String DepthVal = "NA";
	        	   
	        	   System.out.println("***************** Depth Brand *********"+GetDepth);
	        	   if(!GetDepth.contains("There are no Plug records to display.") )
	        	   {
	        		   if(!GetDepth.contains("There are no Packer records to display.") )
	        		   {
	        			   String[] Allval = GetDepth.split(" ");
	        			   DepthVal= Allval[Allval.length-2];
	        		   }
	        		   else {
	        			 String temp =  GetDepth.replaceAll("There are no Packer records to display. ", " ");
	        			 temp.trim();
	        			  String[] let = temp.split(" ");
	        			  DepthVal= let[1];
	        			   
	        		   }
	        		   plugback_depth = DepthVal;
	        	   }
	        	   
	           }

                   
                    if( s.startsWith("Other Remarks") ) 
	           {
	        	 
                           Casing_and_Cement_Line = i;	  
	           }
                     if( s.startsWith("Lateral Holes") ||s.startsWith("FOR COMMISSION USE ONLY")  ) 
	           {
	        	   
                           Liner_line = i;
                        
                          int GetColumns =  Liner_line - Casing_and_Cement_Line;
                          
                          for(int index = Casing_and_Cement_Line+1;index<Liner_line;index++)
                          {
                             Remark = Remark+lines[index];
                          }
                                                    
                           
	           }
                  if(s.startsWith("Completion Type")){
                        String completionTypeOption = "";
                        boolean typeMatched = false;
                        System.out.println("***************** Completion Type *********");
                        if(lines[i+1].startsWith("X")){
                        String[] completionTypedate1 = lines[i+1].split(" ");
                        completionTypeOption = completionTypedate1[1].trim() +" "+completionTypedate1[2].trim();
                        typeMatched = true;
                    }
                       
                        if(lines[i+2].startsWith("X")){
                        if(typeMatched){
                            completionTypeOption = completionTypeOption + ",";
                        }
                        String[] completionTypedate1 = lines[i+2].split(" ");
                        completionTypeOption = completionTypedate1[1].trim() +" "+completionTypedate1[2].trim();
                        typeMatched = true;
                    }
                        if(lines[i+3].startsWith("X")){
                        if(typeMatched){
                            completionTypeOption = completionTypeOption + ",";
                        }
                        String[] completionTypedate1 = lines[i+3].split(" ");
                        completionTypeOption = completionTypedate1[1].trim();
                        typeMatched = true;
                    }
                        
                       // completionTypeSet.setCompletionType(completionTypeOption);
                      
                      CompletionTypesArrayList.add( new CompletionType(well_id,completionTypeOption,PdfName ));

                    }
                    
                    // Second Page content
                     if( s.startsWith("Formation Name:") ) 
                         {
                           String FormationName = s;
	        	   String[] splited = FormationName.split("Class:");
	        	   well_type = splited[1].trim();
                           System.out.println("***************** Class Type *********"+well_type);

                          }
                      if( s.startsWith("Status:") ) 
                         {
                           String Status = s;
	        	   String getStatus = Status.replaceAll("Status:", "");
	        	   status = getStatus.trim();
                           System.out.println("***************** Status *********"+status);
                          }
                    
                  
	           
	           i++;

	            }
             WellArray.add(new WellDetails(well_id,operator_name,operator_number,well_name,well_number,status,well_type,datum_elevation,ground_elevation,plugback_depth,spud_date,completion_date,firstprodate,total_depth,drill_type,drill_started,drill_finished,PdfName));                   
              productionZone.add(new ProductionZoneDetails(well_id, OTCProductionUnitNo));      
             reader.close();
            String GetTableExtract = GetTableExtract(aPDFfile, PdfName ,well_id);
	        } 
                catch (IOException e) {
	            e.printStackTrace();
	        }
	        catch (ArrayIndexOutOfBoundsException ex)
	        {
	        	 ex.printStackTrace();
	        }
	    }
    
    public static void WellHeaderSheet()
	{// Create a Workbook
            
        Workbook workbook = new XSSFWorkbook(); // new HSSFWorkbook() for generating `.xls` file

        /* CreationHelper helps us create instances of various things like DataFormat, 
           Hyperlink, RichTextString etc, in a format (HSSF, XSSF) independent way */
        CreationHelper createHelper = workbook.getCreationHelper();

        // Create a Sheet
        Sheet sheet = workbook.createSheet("WellHeader");
        Sheet Casingsheet = workbook.createSheet("Casing");
        Sheet Completionsheet = workbook.createSheet("Completion");
        Sheet ProductionZoneSheet = workbook.createSheet("ProductionZone");
        Sheet FormationSheet = workbook.createSheet("Formation");
        Sheet InitialPotentialSheet = workbook.createSheet("Initial Potential");
        Sheet PerforationSheet = workbook.createSheet("Perforation");

//           Create a Font for styling header cells
//           Font headerFont = workbook.createFont();
//           headerFont.setBold(true);
//           headerFont.setFontHeightInPoints((short) 14);
//           headerFont.setColor(IndexedColors.RED.getIndex());

        // Create a CellStyle with the font
        CellStyle headerCellStyle = workbook.createCellStyle();
     //   headerCellStyle.setFont(headerFont);

        // Create a Row
        Row headerRow = sheet.createRow(0);
        
        for(int i = 0; i < columns.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(columns[i]);
            cell.setCellStyle(headerCellStyle);
        }
        
        Row productionHeaderRow = ProductionZoneSheet.createRow(0);

         for(int i = 0; i < productionZoneColumns.length; i++) {
            Cell cell = productionHeaderRow.createCell(i);
            cell.setCellValue(productionZoneColumns[i]);
            cell.setCellStyle(headerCellStyle);
        }
        
         int rowNum = 1;

         for(ProductionZoneDetails produZone :productionZone)
         {
             Row row = ProductionZoneSheet.createRow(rowNum++);
             row.createCell(0)
                    .setCellValue(produZone.getWell_ID());
             row.createCell(1)
                    .setCellValue(produZone.getOTCProductionUnitNo());
             
         }
         
        rowNum =1;
        
        for(WellDetails well: WellArray) {
            Row row = sheet.createRow(rowNum++);

            row.createCell(0)
                    .setCellValue(well.getWell_ID());

            row.createCell(1)
                    .setCellValue(well.getOperator_Name());

            row.createCell(2)
                    .setCellValue(well.getOperator_Number());
            row.createCell(3)
            .setCellValue(well.getWell_Name());
            row.createCell(4)
            .setCellValue(well.getWell_Number());
            row.createCell(5)
            .setCellValue(well.getWell_Type());
            row.createCell(6)
            .setCellValue(well.getStatus());
            row.createCell(7)
            .setCellValue(well.getDatum_Elevation());
            row.createCell(8)
            .setCellValue(well.getGround_Elevation());
            row.createCell(9)
            .setCellValue(well.getPlugback_Depth());
            row.createCell(10)
            .setCellValue(well.getSpud_Date());
            row.createCell(11)
            .setCellValue(well.getCompletion_Date());
            row.createCell(12)
            .setCellValue(well.getFirstProDate());
            row.createCell(13)
            .setCellValue(well.getTotal_Depth());
            row.createCell(14)
            .setCellValue(well.getDrill_Type());
            row.createCell(15)
            .setCellValue(well.getDrill_Started());
            row.createCell(16)
            .setCellValue(well.getDrill_Finished());
            row.createCell(17)	
            .setCellValue(well.getPDFname());
            
        }
        
        
        
        Row CasingheaderRow = Casingsheet.createRow(0);
        
        for(int i = 0; i < CasingColumns.length; i++) {
            Cell cell = CasingheaderRow.createCell(i);
            cell.setCellValue(CasingColumns[i]);
            cell.setCellStyle(headerCellStyle);
        }
        
        int CasingRow =1 ;
         for(CasingDetails Casing :CasingDetailsArray)
         {
             Row row = Casingsheet.createRow(CasingRow++);
             row.createCell(0)
                    .setCellValue(Casing.getWell_Number());
             row.createCell(1)
                    .setCellValue(Casing.getType());
              row.createCell(2)
                    .setCellValue(Casing.getSize());
              row.createCell(3)
                    .setCellValue(Casing.getWeight());
              row.createCell(4)
                    .setCellValue(Casing.getGrade());
              row.createCell(5)
                    .setCellValue(Casing.getFeet());
              row.createCell(6)
                    .setCellValue(Casing.getPSI());
               row.createCell(7)
                    .setCellValue(Casing.getSAX());
               row.createCell(8)
                    .setCellValue(Casing.getTopofCMT());
               row.createCell(9)
                    .setCellValue(Casing.getPdfFileName());
         }
        
        // ******************** Completion Content ***********************
        
        Row CompletionheaderRow = Completionsheet.createRow(0);
        
        for(int i = 0; i < CompletionColumns.length; i++) {
            Cell cell = CompletionheaderRow.createCell(i);
            cell.setCellValue(CompletionColumns[i]);
            cell.setCellStyle(headerCellStyle);
        }
        
         int completerow = 1;
        for(CompletionType completiontType: CompletionTypesArrayList) {
            Row row = Completionsheet.createRow(completerow++);
            row.createCell(0)
                    .setCellValue(completiontType.getAPINo());

            row.createCell(1)
                    .setCellValue(completiontType.getCompletionType());
            row.createCell(2)
                    .setCellValue(completiontType.getPDfName());
        }
      // ******************************************************************

        
        // ******************** Formation Content ***********************
        
         Row FormationHeader = FormationSheet.createRow(0);
        
        for(int i = 0; i < FormationColumns.length; i++) {
            Cell cell = FormationHeader.createCell(i);
            cell.setCellValue(FormationColumns[i]);
            cell.setCellStyle(headerCellStyle);
        }
        
        int FormationRow = 1 ;
         for(Formation formation :FormationsArray)
         {
             Row row = FormationSheet.createRow(FormationRow++);
             row.createCell(0)
                    .setCellValue(formation.getWell_ID());
             row.createCell(1)
                    .setCellValue(formation.getFormation());
              row.createCell(2)
                    .setCellValue(formation.getTop());
              row.createCell(3)
                    .setCellValue(formation.getPDFName());
         }
         
      // ******************************************************************
      
      
      
       // ******************** Initial Potential ***********************
       
        Row InitialPotentialHeader = InitialPotentialSheet.createRow(0);
        
        for(int i = 0; i < InitialPotentialColumns.length; i++) {
            Cell cell = InitialPotentialHeader.createCell(i);
            cell.setCellValue(InitialPotentialColumns[i]);
            cell.setCellStyle(headerCellStyle);
        }
        
            int InitialPotentialRow = 1 ;
         for(InitialPotential initialPotential :InitialPotentialArray)
         {
             Row row = InitialPotentialSheet.createRow(InitialPotentialRow++);
             row.createCell(0)
                    .setCellValue(initialPotential.getWell_ID());
             row.createCell(1)
                    .setCellValue(initialPotential.getTesData());
              row.createCell(2)
                    .setCellValue(initialPotential.getOilVolume());
              row.createCell(3)
                    .setCellValue(initialPotential.getOilRate());
              row.createCell(4)
                    .setCellValue(initialPotential.getGasVolume());
             row.createCell(5)
                    .setCellValue(initialPotential.getGasRate());
              row.createCell(6)
                    .setCellValue(initialPotential.getWaterVolume());
              row.createCell(7)
                    .setCellValue(initialPotential.getFlowType());
               row.createCell(8)
                    .setCellValue(initialPotential.getFlowPressure());
              row.createCell(9)
                    .setCellValue(initialPotential.getChoke());
              row.createCell(10)
                    .setCellValue(initialPotential.getRemark());
              row.createCell(11)
                    .setCellValue(initialPotential.getPDFName());
         }
      
      // ******************************************************************
      
      
      
       Row PerforationHeader = PerforationSheet.createRow(0);
        
        for(int i = 0; i < PerforationColumns.length; i++) {
            Cell cell = PerforationHeader.createCell(i);
            cell.setCellValue(PerforationColumns[i]);
            cell.setCellStyle(headerCellStyle);
        }
       int PerforationRow = 1 ;
       for(Perforation aPerforation :PerforationArray)
         {
             Row row = PerforationSheet.createRow(PerforationRow++);
             row.createCell(0)
                    .setCellValue(aPerforation.getWell_ID());
             row.createCell(1)
                    .setCellValue(aPerforation.getFrom());
              row.createCell(2)
                    .setCellValue(aPerforation.getTo());
              row.createCell(3)
                    .setCellValue(aPerforation.getOrderNo());
              row.createCell(4)
                    .setCellValue(aPerforation.getFractureTreatments());
             row.createCell(5)
                    .setCellValue(aPerforation.getAcidVolumes());
              row.createCell(6)
                    .setCellValue(aPerforation.getPDFName());          

         }
      
      // ******************************************************************

      
         String currentDate = null;
        String fileName = "WellDetailsNew";
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy-HH-mm-ss");           
        Date date = new Date();  
        currentDate = formatter.format(date);
        fileName = fileName+"("+currentDate+")";
       
           try {
        	 FileOutputStream fileOut = new FileOutputStream(fileName+".xlsx");
                 workbook.write(fileOut);
		fileOut.close();
	        // Closing the workbook
	        workbook.close();
                
                // ---- Clear all Array list
               WellArray.clear();
               CasingDetailsArray.clear();
               FormationsArray .clear();
               InitialPotentialArray.clear();
               CompletionTypesArrayList.clear();
               productionZone.clear();

                
                
                JOptionPane.showMessageDialog(null, "Completed");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}      
	}
    
     public  String GetTableExtract(String aPDFfile, String PdfName, String well_id) {
        try {
            // TODO Auto-generated method stub

            PDDocument pd = PDDocument.load(new File(aPDFfile));
            boolean Start_read = false  ;
            int totalPages = pd.getNumberOfPages();
            System.out.println("Total Pages in Document: " + totalPages);
            if (totalPages > 1) {
                ObjectExtractor oe = new ObjectExtractor(pd);
                SpreadsheetExtractionAlgorithm sea = new SpreadsheetExtractionAlgorithm();
                 SpreadsheetExtractionAlgorithm PageTWoAlgorithm = new SpreadsheetExtractionAlgorithm();
                Page PageOne = oe.extract(1);
                Page PageTwo = oe.extract(2);
                boolean fasle;
               

                // extract text from the table after detecting
                List<Table> FirstPagetables = sea.extract(PageOne);
                List<Table> SecondPagetables = PageTWoAlgorithm.extract(PageTwo);

                for (Table tables : FirstPagetables) {
                    List<List<RectangularTextContainer>> rows = tables.getRows();

                    for (int i = 0; i < rows.size(); i++) {

                        List<RectangularTextContainer> cells = rows.get(i);

                        if(cells.get(0).getText().equals("Casing and Cement"))
                        {
                            Start_read =true ;
                        }
                        if(cells.get(0).getText().equals("Liner"))
                        {
                            Start_read =false ;
                        }
                        
                        if(Start_read)
                        {
                            
                             String Well_Number="";
                             String Type="@";
                             String Size="";
                             String Weight="";
                             String Grade="";
                             String Feet="";
                             String PSI="";
                             String SAX="";
                             String TopofCMT="";
                            
                        if(cells.size() > 7) {
         
                            if(!cells.get(0).getText().equals("Type") && !cells.get(0).getText().equals("Casing and Cement") &&!cells.get(0).getText().equals(" ") )
                            {
                               // System.out.print(cells.get(j).getText() + "|");
                              Type    =     cells.get(0).getText();
                              Size    =     cells.get(1).getText();
                              Weight  =     cells.get(2).getText();
                              Grade   =     cells.get(3).getText();
                              Feet    =     cells.get(4).getText();
                              PSI     =     cells.get(5).getText();
                              SAX     =     cells.get(6).getText();
                              TopofCMT=     cells.get(7).getText();  
                            }
                            if(!Type.equals("@"))
                            CasingDetailsArray.add(new CasingDetails(Type,Size,Weight,Grade,Feet,PSI,SAX,TopofCMT,well_id,PdfName));
                        }
                        
                        
                        }
                    }
                }
                
                // ------------- Read Second Page Tables -----------------
                
                boolean ReadFormation = false;
                boolean ReadIntialTest = false;
             
                
            for (Table tables : SecondPagetables) {
                    List<List<RectangularTextContainer>> rows = tables.getRows();
                    
                     

                    for (int i = 0; i < rows.size(); i++) {

                        List<RectangularTextContainer> cells = rows.get(i);
                        System.out.println("-->"+cells.get(0).getText());

                                
                         if(cells.get(0).getText().equals("Test Date") )
                        {
                            ReadIntialTest =true ;
                        }
                          if(cells.get(0).getText().equals("Completion and Test Data by Producing Formation"))
                        {
                            ReadIntialTest =false ;
                        }
                         
                         if(ReadIntialTest)
                         {
                             String TesData = "@";
                             String OilVolume = "";
                             String OilRate = "";
                             String GasVolume = "";
                             String GasRate = "";
                             String WaterVolume = "";
                             String FlowType = "";
                             String FlowPressure = "";
                             String Choke = "";
                             String BHPressure = "";
                            
                             String PDFName = "";

                              if(cells.size()>10) {
                                  
                            if(!cells.get(0).getText().equals("Pressure") && !cells.get(0).getText().equals("Completion and Test Data by Producing Formation") &&
                                    !cells.get(0).getText().equals("Test Date") && !cells.get(0).getText().equals(" "))
                            {
                         
                                       TesData = cells.get(0).getText();
                                       OilVolume = cells.get(2).getText();
                                       OilRate = cells.get(3).getText();
                                       GasVolume = cells.get(4).getText();
                                       GasRate = cells.get(5).getText();
                                       WaterVolume = cells.get(6).getText();
                                       FlowType = cells.get(7).getText();                         
                                       FlowPressure = cells.get(8).getText();
                                       Choke = cells.get(9).getText();
                                       BHPressure =cells.get(10).getText();
                                      // Remark = cells.get(10).getText();
                             
                               System.out.print(cells.get(0).getText() + "|");    
                                
                            }
                            
                           
                            if(!TesData.equals("@"))
                            InitialPotentialArray.add(new InitialPotential(well_id,TesData,OilVolume,OilRate,GasVolume,GasRate,WaterVolume,FlowType,FlowPressure,Choke,BHPressure,Remark,PdfName));


                        }
                        }

                        if(cells.get(0).getText().equals("Formation"))
                        {
                            ReadFormation =true ;
                        }
                        if(cells.get(0).getText().equals("Other Remarks"))
                        {
                            ReadFormation =false ;
                        }
                       
                        
                        if(ReadFormation)
                        {                     
                             String Formation="@";
                             String Top="";                       
                            if(cells.size()>1)
                                {
                            if(!cells.get(0).getText().equals("Formation") && !cells.get(0).getText().equals(" "))
                            {
                                 System.out.print(cells.get(0).getText() + "|");  
                                 Formation = cells.get(0).getText();
                                 Top = cells.get(1).getText();
                                 
                            }
                             if(!Formation.equals("@"))
                            FormationsArray.add(new Formation(well_id,Formation,Top,PdfName));
                              
                        }
                            
                        }
                        
                        

                       
                    }
                }
            
            
            
        //   -------- -------- -------- --------  Read Perforation --------
            
              boolean Start_perforationInt =  false;
                boolean StartReadAcidval = false;
                
                String OrderNo ="@";
                String From ="";
                String To ="";
                String FractureTreatments ="";
                String AcidVolumes ="";                  
   
                BasicExtractionAlgorithm bea = new BasicExtractionAlgorithm();
                
                
                List<Table> SecondPagetablesForPerforation = bea.extract(PageTwo);

                for (Table tables : SecondPagetablesForPerforation) {
                    List<List<RectangularTextContainer>> rows = tables.getRows();

                    for (int i = 0; i < rows.size(); i++) {

                        List<RectangularTextContainer> cells = rows.get(i);

                        if(cells.get(0).getText().equals("Order No Unit Size"))
                        {
                            Start_perforationInt =true ;
                        }   
                        if(cells.get(0).getText().startsWith("Acid Volumes"))
                        {
                            Start_perforationInt =false ;
                            StartReadAcidval =true;
                        } 
                        
                         if(cells.get(0).getText().startsWith("Formation Name:") )
                        {
                            StartReadAcidval =false;
                        } 
                         if(cells.get(0).getText().startsWith("Formation") )
                        {
                            StartReadAcidval =false;
                        } 
                        
                        
                      
                      if(Start_perforationInt)  
                      { 
                      if((!cells.get(0).getText().startsWith("Order No Unit Size") ) && (!cells.get(0).getText().startsWith("Acid Volumes") ) )
                     if(cells.size()>5) 
                    {
                            
                      if((cells.get(0).getText().equalsIgnoreCase("There are no Spacing Order records to display."))){
                            OrderNo  = cells.get(0).getText();
                            From     =  cells.get(2).getText();
                            To       =    cells.get(4).getText();
                    
                        }
                         else{
                          String ORdernum = cells.get(0).getText();
                          String[] getOrderNumberOnly = ORdernum.split(" ");
                            OrderNo  = getOrderNumberOnly[0];
                            From     =  cells.get(2).getText();
                            To       =  cells.get(4).getText();
                          }
                         
                       }
                        }
                       if(StartReadAcidval)  
                      { 
                      if((!cells.get(0).getText().startsWith("Acid Volumes") ) && (!cells.get(0).getText().startsWith("Formation Name:") ) )
                        if (  cells.size()>3) {   
                            
                            AcidVolumes =cells.get(0).getText();
                            FractureTreatments = cells.get(3).getText();
               System.out.print(cells.get(3).getText() + ":");
                          }
                        }
                       
                    if((StartReadAcidval == true) || (Start_perforationInt == true))
                    {  
                        if(!OrderNo.equals("@"))
                        PerforationArray.add(new Perforation(well_id,From,To,OrderNo,FractureTreatments,AcidVolumes,PdfName));
                    }
         System.out.print("");
                    }
                    
   
                }
            
            
            }
        } catch (IOException ex) {
            Logger.getLogger(PdfTableExtract.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "";
    }
           
    
    
}
